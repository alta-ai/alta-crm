import { supabase } from './supabase';

/**
 * Generates a secure token for accessing appointment forms
 */
export async function generateFormToken(appointmentId: string) {
  try {
    // Check if a token already exists
    const { data: existingToken } = await supabase
      .from('form_tokens')
      .select('token')
      .eq('appointment_id', appointmentId)
      .maybeSingle();

    if (existingToken?.token) {
      return existingToken.token;
    }

    // Create new token
    const { data, error } = await supabase
      .from('form_tokens')
      .insert({
        appointment_id: appointmentId,
        token: '', // Will be generated by database trigger
        expires_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days from now
      })
      .select('token')
      .single();

    if (error) throw error;
    return data.token;
  } catch (error) {
    console.error('Error generating form token:', error);
    throw error;
  }
}

/**
 * Validates a form token and returns the associated appointment data
 */
export async function validateFormToken(token: string) {
  try {
    const { data, error } = await supabase
      .from('appointment_forms_view')
      .select(`
        appointment_id,
        patient_id,
        examination_id,
        billing_type,
        start_time,
        device_id,
        location_id,
        form_id,
        form_name,
        form_description,
        form_type,
        form_data,
        form_fields
      `)
      .eq('form_token', token)
      .throwOnError();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error('Error validating form token:', error);
    throw error;
  }
}

/**
 * Gets the forms URL for an appointment
 */
export function getFormsUrl(token: string) {
  const baseUrl = window.location.origin;
  return `${baseUrl}/forms/${token}`;
}